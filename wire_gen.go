// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"twitterMock/app"
	"twitterMock/dao"
	"twitterMock/handler"
	"twitterMock/pkg/app"
	"twitterMock/pkg/config"
	"twitterMock/pkg/httpserver"
	"twitterMock/pkg/logger"
	"twitterMock/pkg/mongodb"
	"twitterMock/service"
)

// Injectors from wire.go:

func Initialize(ctx context.Context, envFile config.Path) (*app.App, func(), error) {
	appConfig, err := app.NewConfig(envFile)
	if err != nil {
		return nil, nil, err
	}
	loggerConfig := appConfig.Logger
	zapConfig, err := logger.NewConfig(loggerConfig)
	if err != nil {
		return nil, nil, err
	}
	zapLogger, cleanup, err := logger.New(loggerConfig, zapConfig)
	if err != nil {
		return nil, nil, err
	}
	httpserverConfig := appConfig.HTTPServer
	twitterMockAPI, err := module.NewAPI(zapLogger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	mongodbConfig := appConfig.MongoDB
	database, err := mongodb.GetConnection(mongodbConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	daoInterface := dao.NewDaoInterface(database, zapLogger)
	serviceInterface := service.NewServiceInterface(daoInterface, zapLogger)
	feedHandler := handler.NewFeedHandler(serviceInterface, zapLogger)
	followHandler := handler.NewFollowHandler(serviceInterface, zapLogger)
	signUpHandler := handler.NewSignUpHandler(serviceInterface, zapLogger)
	tweetHandler := handler.NewTweetHandler(serviceInterface, zapLogger)
	loginHandler := handler.NewLoginHandler(serviceInterface, zapLogger)
	logoutHandler := handler.NewLogoutHandler(serviceInterface, zapLogger)
	httpHandler, err := module.NewHandler(zapLogger, twitterMockAPI, feedHandler, followHandler, signUpHandler, tweetHandler, loginHandler, logoutHandler)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	server, cleanup2, err := httpserver.New(ctx, httpserverConfig, zapLogger, httpHandler)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	appApp := app.NewApp(zapLogger, server)
	return appApp, func() {
		cleanup2()
		cleanup()
	}, nil
}
