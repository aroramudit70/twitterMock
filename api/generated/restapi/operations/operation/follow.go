// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FollowHandlerFunc turns a function with the right signature into a follow handler
type FollowHandlerFunc func(FollowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FollowHandlerFunc) Handle(params FollowParams) middleware.Responder {
	return fn(params)
}

// FollowHandler interface for that can handle valid follow params
type FollowHandler interface {
	Handle(FollowParams) middleware.Responder
}

// NewFollow creates a new http.Handler for the follow operation
func NewFollow(ctx *middleware.Context, handler FollowHandler) *Follow {
	return &Follow{Context: ctx, Handler: handler}
}

/* Follow swagger:route GET /follow/{userHandle} Operation follow

Follow other users

Follow other users to increase your social group

*/
type Follow struct {
	Context *middleware.Context
	Handler FollowHandler
}

func (o *Follow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewFollowParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
